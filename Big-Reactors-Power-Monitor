reactor = peripheral.wrap("back")

mon = peripheral.find("monitor")
while mon == nil do
  mon = peripheral.find("monitor")
  sleep(1)
end

mon.clear()
mon.setBackgroundColor(colors.blue)
color = blue

--power = 0
--fuel = 0
--maxFuel = 0
--rf = 0

function calc(min, max)
  percent = 53 / max

  x = percent * min

  --print("percent: "..percent.." x: "..x)

  return 53, x
end

function progress(current, max, pos1, pos2)
  --Power
  maxX, x = calc(current, max)
  for i = 0, 3 do
    for z = 1, maxX do
      mon.setCursorPos(pos1 + z, pos2 + i)
      if z <= x then
        mon.setBackgroundColor(colors.green)
      else
        mon.setBackgroundColor(colors.white)
      end

      mon.write(" ")
    end
  end
end

function draw(color)
  mon.clear()

  power = reactor.getEnergyStored()
  maxPower = reactor.getEnergyCapacity()
  fuel = reactor.getFuelAmount()
  maxFuel = reactor.getFuelAmountMax()
  fuelConsumed = reactor.getFuelConsumedLastTick()
  rf = reactor.getEnergyProducedLastTick()
  maxRf = 10000

  mon.setCursorPos(28, 1)
  mon.write("Reactor " .. reactor.getEnergyStoredAsText())

  mon.setCursorPos(2, 4)
  mon.write("Power:")
  mon.setCursorPos(1, 5)
  mon.write(math.floor(power/1000).."kRF")
  mon.setCursorPos(1, 6)
  mon.write("/" .. math.floor(maxPower/1000/1000).." MFE")

  mon.setCursorPos(2, 10)
  mon.write("Fuel:")
  mon.setCursorPos(1, 11)
  mon.write(math.floor((fuel / maxFuel) * 100) .. "%")
  mon.setCursorPos(1, 12)
  mon.write(string.format("%.2f", fuelConsumed) .. " uB/t")

  mon.setCursorPos(2, 16)
  mon.write("RF/t:")
  mon.setCursorPos(1, 17)
  mon.write(string.format("%.2f", rf / 1000) .. "kRF/t")

  progress(power, maxPower, 7, 3)
  progress(fuel, maxFuel, 7, 9)
  progress(rf, maxRf, 7, 15)

  if reactor.getActive() == true then
    mon.setBackgroundColor(colors.blue)
  else
    mon.setBackgroundColor(colors.red)
  end
end

while true do
  draw(color)

  local capacity = reactor.getEnergyCapacity()
  local stored = reactor.getEnergyStored()

  print("Stored: " .. stored .. " Capacity: " .. capacity)
  if stored >= (capacity * 0.8) and reactor.getActive() == true then
    print("Reactor Energy is full, shutting down.")
    reactor.setActive(false)
    mon.setBackgroundColor(colors.red)
    color = red
  end

  if stored <= (reactor.getEnergyCapacity() / 4) and reactor.getActive() == false then
    print("Reactor Energy is low, starting up.")
    reactor.setActive(true)
    mon.setBackgroundColor(colors.blue)
    color = blue
  end

  sleep(2)
end
